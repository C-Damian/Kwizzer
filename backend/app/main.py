'''
Step 2: Refactor Endpoints in main.py
Import schemas from schemas.py.
Update endpoints to use these schemas for request validation and response serialization.
Step 3: Add CRUD Endpoints
POST /game/create — Create game, insert into DB, return game info.
GET /game/{join_code} — Fetch game and questions.
POST /game/{join_code}/join — Add player to game.
POST /game/{join_code}/answer — Submit answer.
GET /user/{user_id}/games — List games for host.
'''


from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from app.db import get_db
from pydantic import BaseModel
from app.schemas import GameCreateRequest, GameResponse, PlayerJoinRequest, PlayerResponse, AnswerRequest, AnswerResponse, QuestionOption, Question
import random, string

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/health")
def health_check():
    return {"status": "healthy",
            "Code": 200,
            "Message": "Service is running smoothly."}

def generate_join_code(length=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

@app.post("/game/create", response_model=GameResponse)
def create_game(game: GameCreateRequest):
  # TODO: Pass prompt to LLM to generate the game
  # TODO: Insert Game, User, and Question into DB

  # need to adjust to db logic
  return GameResponse(
    game_id="",  # This would be generated by the game creation logic
    status="",
    message=""
    questions=[],  # Populate with generated questions
    join_code=""  # Example join code
  )
